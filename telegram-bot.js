‚Äú–ó—Ä–æ–±–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–π throttle‚Äù
  const throttleMap = new Map(); // user_id ‚Üí timestamp

const THROTTLE_MS = 10 * 1000; // 10 —Å–µ–∫—É–Ω–¥

const { logToAirtable } = require('./airtable-logs');

require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const fs = require('fs');
const axios = require('axios');

const bot = new Telegraf(process.env.BOT_TOKEN);
const ads = JSON.parse(fs.readFileSync('./data/ads.json', 'utf8'));

// üîç –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–µ–≥—ñ–æ–Ω—É (—Å–ø—Ä–æ—â–µ–Ω–æ)
function detectRegion(ctx) {
  const lang = ctx.from.language_code || 'uk';
  const phone = ctx.message?.contact?.phone_number || '';
  if (phone.startsWith('+48')) return 'PL_SZCZECIN';
  if (phone.startsWith('+420')) return 'EU_CZ';
  return 'UA_KYIV';
}

// üéØ –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–ª–∞–º—É
function getAd(region) {
  return ads.find(ad => ad.region === region);
}

// üßæ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ /start
bot.start((ctx) => {
  const region = detectRegion(ctx);
  const ad = getAd(region);
  const name = ctx.from.first_name || 'üë§';

  ctx.reply(`–ü—Ä–∏–≤—ñ—Ç, ${name}!\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:`, Markup.keyboard([
    ['1Ô∏è‚É£ DAO –ú–∞–Ω—ñ—Ñ–µ—Å—Ç', '2Ô∏è‚É£ –ï—Ç–∏–∫–∞', '3Ô∏è‚É£ –õ—ñ—Ü–µ–Ω–∑—ñ—è'],
    ['5Ô∏è‚É£ –ü—Ä–æ–¥—É–∫—Ç–∏ —É –≤–∞—à–æ–º—É —Ä–µ–≥—ñ–æ–Ω—ñ', '9Ô∏è‚É£ –ó–≤ º—è–∑–∞—Ç–∏—Å—å –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º']
  ]).resize());

  if (ad) {
    ctx.reply(`${ad.product}\n${ad.cta}`, Markup.inlineKeyboard([
      Markup.button.url('üîó –ü–µ—Ä–µ–π—Ç–∏', ad.link)
    ]));
  }
});

// üì≤ –û–±—Ä–æ–±–∫–∞ –∫–ª–∞–≤—ñ—à
bot.hears(/^[0-9]/, async (ctx) => {
  const key = ctx.message.text.trim();
  const user = ctx.from.username || ctx.from.id;

  switch (key) {
    case '1':
      ctx.replyWithDocument({ source: './docs/manifest.pdf' });
      break;
    case '2':
      ctx.replyWithDocument({ source: './docs/ethics.pdf' });
      break;
    case '3':
      ctx.replyWithDocument({ source: './docs/license.pdf' });
      break;
    case '5':
      const region = detectRegion(ctx);
      const ad = getAd(region);
      if (ad) {
        ctx.reply(`${ad.product}\n${ad.cta}`, Markup.inlineKeyboard([
          Markup.button.url('üîó –ü–µ—Ä–µ–π—Ç–∏', ad.link)
        ]));
      }
      break;
    case '9':
      ctx.reply('üìû –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∑–≤ º—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.');
      break;
    default:
      ctx.reply('‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
  }

  // üîê –õ–æ–≥—É–≤–∞–Ω–Ω—è (–æ–ø—Ü—ñ–π–Ω–æ)
  await axios.post(process.env.LOG_WEBHOOK, {
    user,
    action: `–ù–∞—Ç–∏—Å–Ω—É—Ç–æ ${key}`,
    timestamp: new Date().toISOString()
  }).catch(() => {});
});

bot.launch();

const { logToAirtable } = require('./airtable-logs');

logToAirtable({
  user_id: ctx.from.id,
  username: ctx.from.username,
  region: detectRegion(ctx),
  action: '–ù–∞—Ç–∏—Å–Ω—É—Ç–æ 3Ô∏è‚É£ –õ—ñ—Ü–µ–Ω–∑—ñ—è',
  document: 'license.pdf'
});

npm install airtable
