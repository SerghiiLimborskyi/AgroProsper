import express from "express";
import cors from "cors";
import { exec } from "child_process";
import fetch from "node-fetch"; // –î–æ–¥–∞–Ω–æ –¥–ª—è YouTube API

const app = express();
const PORT = 3001;

app.use(cors());
app.use(express.json());

/**
 * ‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
app.post("/api/register", (req, res) => {
  const { name, email, account, wallet } = req.body;
  if (!name || !email || !wallet) {
    return res.status(400).json({ error: "–û–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –≤—ñ–¥—Å—É—Ç–Ω—ñ" });
  }

  console.log("üì• –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:");
  console.log("–Ü–º‚Äô—è:", name);
  console.log("Email:", email);
  console.log("–†–∞—Ö—É–Ω–æ–∫:", account);
  console.log("–ì–∞–º–∞–Ω–µ—Ü—å:", wallet);

  res.status(200).json({ message: "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞" });
});

/**
 * ‚úÖ YouTube API ‚Äî –æ—Å—Ç–∞–Ω–Ω—ñ –≤—ñ–¥–µ–æ –∑ –∫–∞–Ω–∞–ª—É
 */
app.get("/api/videos", async (req, res) => {
  try {
    const apiKey = process.env.YOUTUBE_API_KEY;
    const channelId = "UCsN8AHUPLQp_xJlGOkwZkmw";
    const maxResults = 4;

    const url = `https://www.googleapis.com/youtube/v3/search?key=${apiKey}&channelId=${channelId}&part=snippet,id&order=date&maxResults=${maxResults}`;
    const response = await fetch(url);
    const data = await response.json();

    res.json(data);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ YouTube API:", error);
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–µ–æ" });
  }
});

/**
 * ‚úÖ –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª: –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–µ–æ + –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
 */
app.get("/run/full", async (req, res) => {
  try {
    exec("bash src/makeVideo.sh", (err, stdout, stderr) => {
      if (err) return res.send(`‚ùå ffmpeg error: ${stderr}`);

      require("./src/bot.js");
      res.send("‚úÖ –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –≤—ñ–¥–µ–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ —ñ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!");
    });
  } catch (e) {
    res.send(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${e.message}`);
  }
});

/**
 * ‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
 */
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${PORT}`);
});

/**
 * ‚úÖ –û–±—Ä–æ–±–∫–∞ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
 */
process.on("uncaughtException", err => {
  console.error("Uncaught error:", err);
});
import fs from "fs"; // —è–∫—â–æ —â–µ –Ω–µ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ

app.post("/api/log", (req, res) => {
  const logEntry = {
    timestamp: new Date().toISOString(),
    ...req.body,
  };

  const logFile = "logs.json";
  let logs = [];

  if (fs.existsSync(logFile)) {
    logs = JSON.parse(fs.readFileSync(logFile));
  }

  logs.push(logEntry);
  fs.writeFileSync(logFile, JSON.stringify(logs, null, 2));
  console.log("üìù –õ–æ–≥ –∑–∞–ø–∏—Å–∞–Ω–æ:", logEntry);
  res.status(200).json({ message: "–õ–æ–≥ –æ—Ç—Ä–∏–º–∞–Ω–æ" });
});

const { exec } = require('child_process');

app.get('/run/full', (req, res) => {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É DAO Studio');

  exec('node generateSlides.js && node render.js && sh makeVideo.sh && node bot.js', (err, stdout, stderr) => {
    if (err) {
      console.error('üí• –ü–æ–º–∏–ª–∫–∞:', err.message);
      return res.status(500).send('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Ü–∏–∫–ª—É');
    }
    console.log('‚úÖ –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    res.send('–í—ñ–¥–µ–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ Telegram');
  });
  
  app.post("/api/vote", (req, res) => {
  const { vote } = req.body;
  const file = "data/votes.json";
  let votes = { yes: 0, no: 0 };

  if (fs.existsSync(file)) {
    votes = JSON.parse(fs.readFileSync(file));
  }

  if (vote === "yes") votes.yes += 1;
  else if (vote === "no") votes.no += 1;

  fs.writeFileSync(file, JSON.stringify(votes, null, 2));
  res.json(votes);
});
  
  app.post("/api/badge", (req, res) => {
  const { badgeType } = req.body;
  const badgeMap = {
    yes: { id: "badge_yes", title: "–ì–æ–ª–æ—Å '–¢–∞–∫'", image: "badge_yes.png" },
    no: { id: "badge_no", title: "–ì–æ–ª–æ—Å '–ù—ñ'", image: "badge_no.png" }
  };

  const badge = {
    ...badgeMap[badgeType],
    timestamp: new Date().toISOString()
  };

  const file = "data/badges.json";
  let badges = [];

  if (fs.existsSync(file)) {
    badges = JSON.parse(fs.readFileSync(file));
  }

  badges.push(badge);
  fs.writeFileSync(file, JSON.stringify(badges, null, 2));
  res.json(badge);
});
});
