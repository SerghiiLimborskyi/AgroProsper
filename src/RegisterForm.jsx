import React, { useState } from "react";

const ibanCountryMap = {
  UA: "–£–∫—Ä–∞—ó–Ω–∞",
  PL: "–ü–æ–ª—å—â–∞",
  DE: "–ù—ñ–º–µ—á—á–∏–Ω–∞",
  FR: "–§—Ä–∞–Ω—Ü—ñ—è",
  IT: "–Ü—Ç–∞–ª—ñ—è",
  ES: "–Ü—Å–ø–∞–Ω—ñ—è",
  NL: "–ù—ñ–¥–µ—Ä–ª–∞–Ω–¥–∏",
  BE: "–ë–µ–ª—å–≥—ñ—è",
  AT: "–ê–≤—Å—Ç—Ä—ñ—è",
  CH: "–®–≤–µ–π—Ü–∞—Ä—ñ—è",
  GB: "–í–µ–ª–∏–∫–∞ –ë—Ä–∏—Ç–∞–Ω—ñ—è",
};

const ibanCountryMap = {
  ...,
  NO: "–ù–æ—Ä–≤–µ–≥—ñ—è",
  SE: "–®–≤–µ—Ü—ñ—è",
  DK: "–î–∞–Ω—ñ—è",
  FI: "–§—ñ–Ω–ª—è–Ω–¥—ñ—è",
  CZ: "–ß–µ—Ö—ñ—è",
  SK: "–°–ª–æ–≤–∞—á—á–∏–Ω–∞",
  HU: "–£–≥–æ—Ä—â–∏–Ω–∞",
  RO: "–†—É–º—É–Ω—ñ—è",
  BG: "–ë–æ–ª–≥–∞—Ä—ñ—è",
  GR: "–ì—Ä–µ—Ü—ñ—è",
};

const ibanLengthMap = {
  ...,
  NO: 15,
  SE: 24,
  DK: 18,
  FI: 18,
  CZ: 24,
  SK: 24,
  HU: 28,
  RO: 24,
  BG: 22,
  GR: 27,
};


const ibanLengthMap = {
  UA: 29,
  PL: 28,
  DE: 22,
  FR: 27,
  IT: 27,
  ES: 24,
  NL: 18,
  BE: 16,
  AT: 20,
  CH: 21,
  GB: 22,
};

const bankCodeMapUA = {
  "300001": "–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫",
  "322001": "–û—â–∞–¥–±–∞–Ω–∫",
  "305299": "–£–∫—Ä–≥–∞–∑–±–∞–Ω–∫",
  "320478": "–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω –ë–∞–Ω–∫",
  "380775": "–ú–æ–Ω–æ–±–∞–Ω–∫",
  // –¥–æ–¥–∞–π —ñ–Ω—à—ñ –±–∞–Ω–∫–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
};

function formatIBAN(value) {
  return value
    .replace(/\s+/g, "")
    .replace(/(.{4})/g, "$1 ")
    .trim()
    .toUpperCase();
}

function isValidIBAN(iban, countryCode) {
  const cleaned = iban.replace(/\s+/g, "").toUpperCase();
  const regex = /^[A-Z]{2}[0-9]{2}[A-Z0-9]{1,30}$/;
  const expectedLength = ibanLengthMap[countryCode];
  return regex.test(cleaned) && cleaned.length === expectedLength;
}

export default function RegisterForm() {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    account: "",
  });

  const [country, setCountry] = useState("");
  const [bankName, setBankName] = useState("");
  const [ibanError, setIbanError] = useState("");

  const handleChange = (e) => {
    const { name, value } = e.target;

    if (name === "account") {
      const formatted = formatIBAN(value);
      const cleaned = formatted.replace(/\s+/g, "");
      const code = cleaned.slice(0, 2);
      const countryName = ibanCountryMap[code] || "–ù–µ–≤—ñ–¥–æ–º–∞ –∫—Ä–∞—ó–Ω–∞";
      setCountry(countryName);

      if (!ibanLengthMap[code]) {
        setIbanError("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫—Ä–∞—ó–Ω–∞ IBAN –∞–±–æ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è");
        setBankName("");
      } else if (!isValidIBAN(cleaned, code)) {
        setIbanError(
          `‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π IBAN. –û—á—ñ–∫—É–≤–∞–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –¥–ª—è ${countryName}: ${ibanLengthMap[code]} —Å–∏–º–≤–æ–ª—ñ–≤`
        );
        setBankName("");
      } else {
        setIbanError("");

        if (code === "UA") {
          const bankCode = cleaned.slice(4, 10);
          const bank = bankCodeMapUA[bankCode] || "–ù–µ–≤—ñ–¥–æ–º–∏–π –±–∞–Ω–∫";
          setBankName(bank);
        } else {
          setBankName("–ê–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ");
        }
      }

      setFormData((prev) => ({
        ...prev,
        [name]: formatted,
      }));
    } else {
      setFormData((prev) => ({
        ...prev,
        [name]: value,
      }));
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (ibanError) {
      alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ —É —Ñ–æ—Ä–º—ñ.");
      return;
    }
    console.log("Submitted:", formData);
  };

  return (
    <form onSubmit={handleSubmit}>
      <label>
        –Ü–º‚Äô—è:
        <input
          type="text"
          name="name"
          value={formData.name}
          onChange={handleChange}
        />
      </label>
      <br />
      <label>
        Email:
        <input
          type="email"
          name="email"
          value={formData.email}
          onChange={handleChange}
        />
      </label>
      <br />
      <label>
        IBAN —Ä–∞—Ö—É–Ω–æ–∫:
        <input
          type="text"
          name="account"
          value={formData.account}
          onChange={handleChange}
        />
      </label>
      <p>üåç –ö—Ä–∞—ó–Ω–∞ IBAN: <strong>{country}</strong></p>
      <p>üè¶ –ë–∞–Ω–∫: <strong>{bankName}</strong></p>
      {ibanError && <p style={{ color: "red" }}>{ibanError}</p>}
      <br />
      <button type="submit">–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è</button>
    </form>
  );
}
